/**
 * 匿名掲示板API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Comment', 'model/CommentRequest', 'model/Comments', 'model/Errors', 'model/Post', 'model/PostRequest', 'model/Posts'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Comment'), require('../model/CommentRequest'), require('../model/Comments'), require('../model/Errors'), require('../model/Post'), require('../model/PostRequest'), require('../model/Posts'));
  } else {
    // Browser globals (root is window)
    if (!root.Api) {
      root.Api = {};
    }
    root.Api.DefaultApi = factory(root.Api.ApiClient, root.Api.Comment, root.Api.CommentRequest, root.Api.Comments, root.Api.Errors, root.Api.Post, root.Api.PostRequest, root.Api.Posts);
  }
}(this, function(ApiClient, Comment, CommentRequest, Comments, Errors, Post, PostRequest, Posts) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createComment operation.
     * @callback module:api/DefaultApi~createCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 投稿にコメントを付ける
     * @param {Number} postId 投稿のID
     * @param {module:model/CommentRequest} commentRequest 投稿に付けるコメント
     * @param {module:api/DefaultApi~createCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    this.createComment = function(postId, commentRequest, callback) {
      var postBody = commentRequest;

      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling createComment");
      }

      // verify the required parameter 'commentRequest' is set
      if (commentRequest === undefined || commentRequest === null) {
        throw new Error("Missing the required parameter 'commentRequest' when calling createComment");
      }


      var pathParams = {
        'postId': postId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Comment;

      return this.apiClient.callApi(
        '/posts/{postId}/comments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPost operation.
     * @callback module:api/DefaultApi~createPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Post} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 投稿を作成する
     * @param {module:model/PostRequest} postRequest 作成する投稿
     * @param {module:api/DefaultApi~createPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Post}
     */
    this.createPost = function(postRequest, callback) {
      var postBody = postRequest;

      // verify the required parameter 'postRequest' is set
      if (postRequest === undefined || postRequest === null) {
        throw new Error("Missing the required parameter 'postRequest' when calling createPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Post;

      return this.apiClient.callApi(
        '/posts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteComment operation.
     * @callback module:api/DefaultApi~deleteCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 投稿に付いたコメントを削除する
     * @param {Number} postId 投稿のID
     * @param {Number} commentId コメントのID
     * @param {module:api/DefaultApi~deleteCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteComment = function(postId, commentId, callback) {
      var postBody = null;

      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling deleteComment");
      }

      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling deleteComment");
      }


      var pathParams = {
        'postId': postId,
        'commentId': commentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/posts/{postId}/comments/{commentId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePost operation.
     * @callback module:api/DefaultApi~deletePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 投稿を削除する
     * @param {Number} postId 投稿のID
     * @param {module:api/DefaultApi~deletePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePost = function(postId, callback) {
      var postBody = null;

      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling deletePost");
      }


      var pathParams = {
        'postId': postId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/posts/{postId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getComments operation.
     * @callback module:api/DefaultApi~getCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 投稿に付いたコメントをすべて取得する
     * @param {Number} postId 投稿のID
     * @param {module:api/DefaultApi~getCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comments}
     */
    this.getComments = function(postId, callback) {
      var postBody = null;

      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling getComments");
      }


      var pathParams = {
        'postId': postId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Comments;

      return this.apiClient.callApi(
        '/posts/{postId}/comments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPost operation.
     * @callback module:api/DefaultApi~getPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Post} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 投稿を取得する
     * @param {Number} postId 投稿のID
     * @param {module:api/DefaultApi~getPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Post}
     */
    this.getPost = function(postId, callback) {
      var postBody = null;

      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling getPost");
      }


      var pathParams = {
        'postId': postId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Post;

      return this.apiClient.callApi(
        '/posts/{postId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPosts operation.
     * @callback module:api/DefaultApi~getPostsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Posts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 投稿をすべて取得する
     * @param {module:api/DefaultApi~getPostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Posts}
     */
    this.getPosts = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Posts;

      return this.apiClient.callApi(
        '/posts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePost operation.
     * @callback module:api/DefaultApi~updatePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Post} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 投稿を更新する
     * @param {Number} postId 投稿のID
     * @param {module:model/PostRequest} postRequest 作成する投稿
     * @param {module:api/DefaultApi~updatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Post}
     */
    this.updatePost = function(postId, postRequest, callback) {
      var postBody = postRequest;

      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling updatePost");
      }

      // verify the required parameter 'postRequest' is set
      if (postRequest === undefined || postRequest === null) {
        throw new Error("Missing the required parameter 'postRequest' when calling updatePost");
      }


      var pathParams = {
        'postId': postId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Post;

      return this.apiClient.callApi(
        '/posts/{postId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
